CVE: CVE-2011-3935
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 0.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 00bbe27631ddce543e00d5fbdee445c39fc84d7f
  note: ''
- commit: 4df7beb3686caf2df345d2e10564aa8cf6c24a65
  note: ''
- commit: '0838cfdc8a10185604db5cd9d6bffad71279a0e8'
  note: ''
- commit: 445f0a8b666a34e6402f6ae96c6804c8bc024baa
  note: ''
- commit: 3dde66752d59dfdd0f3727efd66e7202b3c75078
  note: ''
- commit: 13184036a6b1b1d4b61c91118c0896e9ad4634c3
  note: ''
- commit: ec10d2d53999f6edf7d7b5ac88df263eccfb1fb0
  note: ''
- commit: d90aeeaf569e4a08c30b3d1d09c3cff3a86eb431
  note: ''
- commit: 2bbec1eda46d907605772a8b6e8263caa4bc4c82
  note: ''
- commit: 8312e3fc9041027a33c8bc667bb99740fdf41dd5
  note: ''
- commit: 4a71da0f3ab7f5542decd11c81994f849d5b2c78
  note: ''
- commit: 956c901c68eff78288f40e3c8f41ee2fa081d4a8
  note: ''
- commit: 8370e426e42f2e4b9d14a1fb8107ecfe5163ce7f
  note: ''
- commit: afb2aa537954db537d54358997b68f46561fd5a7
  note: ''
- commit: 57cd6d709565e84e84385f8f2a9641ca3fa718be
  note: ''
- commit: faaec4676cb4c7a2303d50df66c6290bc96a7657
  note: ''
- commit: 6fcf2bb8af0e7d6bb179e71e67e5fab8ef0d2ec2
  note: ''
- commit: 7149fce2cac0474a5fbc5b47add1158cd8bb283e
  note: ''
- commit: f35e037c93cf7d25e65b4a2ed3674358f05e4bed
  note: ''
- commit: e6d527ff729e42d80e4756cab779ff4ad693631b
  note: ''
- commit: ff7f198d7f9504f71676327be0be47661cfe39d6
  note: ''
- commit: f74ce3a60d6ef49080df85c44b54280357109f56
  note: ''
- commit: 2d1c0dea5f6b91bec7f5fa53ec050913d851e366
  note: ''
- commit: 5cb57a16ede71d913384a0b3036a2c6df5da5e43
  note: ''
- commit: f9de136b17bc72ff02f39c6a53756d72bbc4bd15
  note: ''
- commit: 247d30a7dba6684ccce4508424f35fd58465e535
  note: ''
- commit: 668494acd8b20f974c7722895d4a6a14c1005f1e
  note: ''
- commit: ''
  note: ''
vccs:
- commit:
  - e278056fbad7405fc47901faea7de98db003a0fa
  note: 'Identified by archeogit. '
- commit:
  - d86053a41689e8a5ed897ef071c62ef3fcdc3655
  - 67335dbce3a905551d43b9eeb49c737278f927c6
  - b78e7197a81e193827cf2408fe25bc1f14843a72
  note: 'Identified by SZZUnleashed. '
- commit:
  - 01ca9ac3346ced92d6cb4d9fe06233a305424510
  note: 'Identified by archeogit. Identified by SZZUnleashed. '
- commit:
  - 68e1794e3a6e30f9898e67701b0bb111c186b595
  note: 'Identified by archeogit. '
- commit:
  - cef4ba9e8a62d0f2d2e8fe5c7b2772abd26b84c9
  note: 'Identified by SZZUnleashed. '
- commit:
  - 0ecca7a49f8e254c12a3a1de048d738bfbb614c6
  note: 'Identified by archeogit. '
- commit:
  - de6d9b6404bfd1c589799142da5a95428f146edd
  note: 'Identified by SZZUnleashed. '
- commit:
  - 07c55d8ea3f952cab2e53db374d28be5e85339ed
  note: 'Identified by archeogit. Identified by archeogit. Identified by SZZUnleashed.
    Identified by archeogit. Identified by archeogit. Identified by archeogit. Identified
    by archeogit. '
- commit:
  - 07c55d8ea3f952cab2e53db374d28be5e85339ed
  - a7adcf29cf4674d45cbc885b1eda6c22657a224b
  - ba87f0801d77c21eb1e4891ca1f846500bbb0939
  note: 'Identified by SZZUnleashed. Identified by SZZUnleashed. '
- commit:
  - a52ef6a894ede214162cd9e95685daa5e656e2f7
  note: 'Identified by archeogit. Identified by SZZUnleashed. Identified by SZZUnleashed. '
- commit:
  - ec10d2d53999f6edf7d7b5ac88df263eccfb1fb0
  note: 'Identified by archeogit. '
- commit:
  - b761659befa6b8d3a238527b31df9ad7c80ce911
  note: 'Identified by archeogit. Identified by SZZUnleashed. '
- commit:
  - bf4a1f17ee9237b6efd4250cf894e274afc31a5f
  note: 'Identified by archeogit. '
- commit:
  - 844d9012a64db8c81c96a7efe337e682224aecf7
  note: 'Identified by archeogit. Identified by SZZUnleashed. '
- commit:
  - 737c40da20de07fd1b1ca99699f896c84b03f0ff
  - d5e34dcb727c0888924fafaa260f9524742a8813
  note: 'Identified by archeogit. '
- commit:
  - 5968d2dd1e9a71537790f9bdea214679b7d56b8b
  - b061d892edd76bbdb8cf70b244c661f45185b76c
  - ff33c5c565106c657ca2b11e5a4c3ec9f509a1a0
  note: 'Identified by SZZUnleashed. '
- commit:
  - d23845f311f04e98777612cae1b55e28923ccdc6
  note: 'Identified by archeogit. '
- commit:
  - d86053a41689e8a5ed897ef071c62ef3fcdc3655
  - 67335dbce3a905551d43b9eeb49c737278f927c6
  - 2912e87a6c9264d556734e2bf94a99c64cf9b102
  - b78e7197a81e193827cf2408fe25bc1f14843a72
  note: 'Identified by SZZUnleashed. '
- commit:
  - 07c55d8ea3f952cab2e53db374d28be5e85339ed
  - 6168781f70ebac7da557207750d14f57c3cd4cb3
  - 2912e87a6c9264d556734e2bf94a99c64cf9b102
  note: 'Identified by SZZUnleashed. '
- commit:
  - 84a96d6a3d6addb15a07d83c1190dbf79dd6b485
  - 6168781f70ebac7da557207750d14f57c3cd4cb3
  - 2912e87a6c9264d556734e2bf94a99c64cf9b102
  - b78e7197a81e193827cf2408fe25bc1f14843a72
  note: 'Identified by SZZUnleashed. '
- commit:
  - 31ad14c21e0735387ba8082c6e3436241f7ccfc8
  note: 'Identified by archeogit. Identified by archeogit. '
- commit:
  - b061d892edd76bbdb8cf70b244c661f45185b76c
  note: 'Identified by SZZUnleashed. Identified by SZZUnleashed. '
- commit:
  - 5e56b30e1febefd4eee7a0831ccbcb979cc11a2e
  note: 'Identified by archeogit. '
- commit:
  - 0bde73d907dbe684e01bafc979bf4a04ddeace1d
  note: 'Identified by SZZUnleashed. '
- commit:
  - 07c55d8ea3f952cab2e53db374d28be5e85339ed
  - 5e56b30e1febefd4eee7a0831ccbcb979cc11a2e
  note: 'Identified by archeogit. '
- commit:
  - ba87f0801d77c21eb1e4891ca1f846500bbb0939
  - 0bde73d907dbe684e01bafc979bf4a04ddeace1d
  note: 'Identified by SZZUnleashed. '
- commit:
  - 6168781f70ebac7da557207750d14f57c3cd4cb3
  note: 'Identified by SZZUnleashed. '
- commit:
  - f74ce3a60d6ef49080df85c44b54280357109f56
  note: 'Identified by archeogit. '
- commit:
  - 07c55d8ea3f952cab2e53db374d28be5e85339ed
  - ba87f0801d77c21eb1e4891ca1f846500bbb0939
  note: 'Identified by SZZUnleashed. '
- commit:
  - f8007a14734ff9fc8a4dd0d0194ab2c645f72578
  note: 'Identified by archeogit. Identified by archeogit. '
- commit:
  - 115329f16062074e11ccf3b89ead6176606c9696
  - 064cf251553ea810d61fa29f72f2f9bd067d3cb7
  - 7458ccbb02a98ece4b4a9018a46eb13fff05b7c2
  note: 'Identified by SZZUnleashed. '
- commit:
  - 115329f16062074e11ccf3b89ead6176606c9696
  note: 'Identified by SZZUnleashed. '
- commit:
  - 0b297700b787a68323629e836b15852c3331b4a0
  note: 'Identified by archeogit. '
- commit:
  - 8370e426e42f2e4b9d14a1fb8107ecfe5163ce7f
  note: 'Identified by archeogit. '
- commit:
  - d86053a41689e8a5ed897ef071c62ef3fcdc3655
  note: 'Identified by SZZUnleashed. '
- commit:
  - 484e59a0a0329c4005ddacd05051925345f4362f
  note: 'Identified by archeogit. '
- commit: ''
  note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD. If it's clear that the vulenrability was discovered by a
    contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer:
  automated:
  contest:
  developer:
discoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer:
  name:
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE:
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:
